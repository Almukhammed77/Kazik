from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import random

user_balances = {}

START_BALANCE = 1000


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE
    await update.message.reply_text(
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}$\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/casino - –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É, –±–ª—ç–∫–¥–∂–µ–∫, –∫–æ—Å—Ç–∏ –∏ –ø–æ–∫–µ—Ä\n"
        "/russian_roulette - –ò–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É"
    )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)
    await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$")


async def casino(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette")],
        [InlineKeyboardButton("üÉè –ë–ª—ç–∫–¥–∂–µ–∫", callback_data="blackjack")],
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="dice")],
        [InlineKeyboardButton("üÉè –ü–æ–∫–µ—Ä", callback_data="poker")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)


async def roulette(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)

    if balance < 100:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É!")
        return

    bet = random.randint(0, 36)
    user_bet = random.randint(0, 36)

    if bet == user_bet:
        winnings = 500
        user_balances[user_id] += winnings
        await query.message.reply_text(f"üéâ –í—ã–ø–∞–ª–æ {bet}, –≤—ã —É–≥–∞–¥–∞–ª–∏! +{winnings}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        user_balances[user_id] -= 100
        await query.message.reply_text(f"üò¢ –í—ã–ø–∞–ª–æ {bet}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {user_bet}. -100$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")


async def blackjack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)

    if balance < 100:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫!")
        return

    user_cards = [random.randint(1, 11) for _ in range(2)]
    dealer_cards = [random.randint(1, 11) for _ in range(2)]
    user_total = sum(user_cards)
    dealer_total = sum(dealer_cards)

    await query.message.reply_text(
        f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards} (—Å—É–º–º–∞: {user_total})\n"
        f"üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_cards} (—Å—É–º–º–∞: {dealer_total})"
    )

    if user_total > 21:
        user_balances[user_id] -= 100
        await query.message.reply_text(f"üò¢ –ü–µ—Ä–µ–±–æ—Ä! -100$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    elif dealer_total > 21 or user_total > dealer_total:
        user_balances[user_id] += 200
        await query.message.reply_text(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +200$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    elif user_total == dealer_total:
        await query.message.reply_text(f"ü§ù –ù–∏—á—å—è! –ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        user_balances[user_id] -= 100
        await query.message.reply_text(f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -100$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")


async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)

    if balance < 50:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏!")
        return

    player_throw = random.randint(1, 6)
    bot_throw = random.randint(1, 6)

    await query.message.reply_text(f"üé≤ –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ {player_throw}, –±–æ—Ç –≤—ã–±—Ä–æ—Å–∏–ª {bot_throw}")

    if player_throw > bot_throw:
        user_balances[user_id] += 100
        await query.message.reply_text(f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! +100$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    elif player_throw < bot_throw:
        user_balances[user_id] -= 50
        await query.message.reply_text(f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -50$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        await query.message.reply_text(f"ü§ù –ù–∏—á—å—è! –ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")


async def poker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)

    if balance < 200:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã –≤ –ø–æ–∫–µ—Ä!")
        return

    hands = ["–ü–∞—Ä–∞", "–î–≤–µ –ø–∞—Ä—ã", "–¢—Ä–æ–π–∫–∞", "–§–ª–µ—à", "–°—Ç—Ä–∏—Ç", "–§—É–ª–ª-—Ö–∞—É—Å", "–ö–∞—Ä–µ", "–°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à", "–†–æ—è–ª-—Ñ–ª–µ—à"]
    player_hand = random.choice(hands)
    bot_hand = random.choice(hands)

    await query.message.reply_text(f"üÉè –í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {player_hand}\nü§ñ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –±–æ—Ç–∞: {bot_hand}")

    if hands.index(player_hand) > hands.index(bot_hand):
        user_balances[user_id] += 500
        await query.message.reply_text(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +500$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    elif hands.index(player_hand) < hands.index(bot_hand):
        user_balances[user_id] -= 200
        await query.message.reply_text(f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -200$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        await query.message.reply_text(f"ü§ù –ù–∏—á—å—è! –ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")



async def russian_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id


    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    balance = user_balances[user_id]

    if balance < 200:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏!")
        return

    bullet_position = random.randint(1, 6)
    trigger_pull = random.randint(1, 6)

    await update.message.reply_text("üî´ –í—ã –ø–æ–¥–Ω–æ—Å–∏—Ç–µ —Ä–µ–≤–æ–ª—å–≤–µ—Ä –∫ –≤–∏—Å–∫—É –∏ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –∫—É—Ä–æ–∫...")

    if bullet_position == trigger_pull:
        user_balances[user_id] = 0
        await update.message.reply_text("üí• –ë–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å—ë... üòµ\nüí∞ –ë–∞–ª–∞–Ω—Å: 0$")
    else:
        winnings = 300
        user_balances[user_id] += winnings
        await update.message.reply_text(
            f"üòÖ –©–µ–ª–∫! –í–∞–º –ø–æ–≤–µ–∑–ª–æ, –±–∞—Ä–∞–±–∞–Ω –ø—É—Å—Ç! +{winnings}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)


    if not context.args:
        await update.message.reply_text("üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/deposit 500` (—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)")
        return

    try:
        amount = int(context.args[0])
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        user_balances[user_id] += amount
        await update.message.reply_text(
            f"‚úÖ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è! –ü—Ä–∏–º–µ—Ä: `/deposit 500`")
def main():
    TOKEN = "7771538325:AAFS1STLG3C47o7-Nk6_htSV9e51A9A_1q0"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("casino", casino))
    app.add_handler(CommandHandler("russian_roulette", russian_roulette))
    app.add_handler(CommandHandler("deposit", deposit))

    app.add_handler(CallbackQueryHandler(roulette, pattern="^roulette$"))
    app.add_handler(CallbackQueryHandler(blackjack, pattern="^blackjack$"))
    app.add_handler(CallbackQueryHandler(dice, pattern="^dice$"))
    app.add_handler(CallbackQueryHandler(poker, pattern="^poker$"))

    app.run_polling()


if __name__ == "__main__":
    main()