from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import random

user_balances = {}
user_bets = {}
user_stats = {}
user_loans = {}
players = {}
active_crash_games = {}
active_duels = {}

START_BALANCE = 1000


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username or f"User_{user_id}"
    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE
        players[user_id] = username
    await update.message.reply_text(
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}$\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/casino - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n"
        "/russian_roulette - –ò–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É\n"
        "/blackjack - –ò–≥—Ä–∞—Ç—å –≤ –±–ª—ç–∫–¥–∂—ç–∫\n"
        "/poker - –ò–≥—Ä–∞—Ç—å –≤ –ø–æ–∫–µ—Ä\n"
        "/hack - –í–∑–ª–æ–º –∫–∞–∑–∏–Ω–æ\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞\n"
        "/bet - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ\n"
        "/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/loan - –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
        "/repay - –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
        "/crime - –°–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n"
        "/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "/duel - –î—É—ç–ª—å\n"
        "/crash - –§—É–Ω–∫—Ü–∏—è\n"
        "/crashout - –í—ã–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å —Ñ—É–Ω–∫—Ü–∏–∏\n"
        "/rob - –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ\n"
    )


async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not user_balances:
        await update.message.reply_text("üìâ –í –∫–∞–∑–∏–Ω–æ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
        return

    sorted_players = sorted(user_balances.items(), key=lambda x: x[1], reverse=True)[:5]
    leaderboard_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"

    for i, (user_id, balance) in enumerate(sorted_players, start=1):
        username = players.get(user_id, "–ê–Ω–æ–Ω–∏–º")
        leaderboard_text += f"{i}. {username} - {balance}$\n"

    await update.message.reply_text(leaderboard_text)

active_duels = {}

async def duel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏"""
    user_id = update.message.from_user.id
    args = context.args

    if len(args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/duel @username <—Å—Ç–∞–≤–∫–∞>`")
        return

    try:
        opponent_username = args[0].strip("@")
        bet = int(args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!")
        return

    if bet <= 0:
        await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        return

    if user_id not in user_balances or user_balances[user_id] < bet:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –¥—É—ç–ª–∏!")
        return


    opponent_id = next((uid for uid, uname in players.items() if uname == opponent_username), None)
    if opponent_id is None:
        await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if opponent_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!")
        return

    if opponent_id in active_duels:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—É—ç–ª–∏!")
        return

    active_duels[opponent_id] = (user_id, bet)
    await update.message.reply_text(f"‚öîÔ∏è –í—ã –≤—ã–∑–≤–∞–ª–∏ @{opponent_username} –Ω–∞ –¥—É—ç–ª—å –Ω–∞ {bet}$! –ñ–¥–µ–º –µ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
    await context.bot.send_message(opponent_id, f"‚öîÔ∏è @{update.message.from_user.username} –≤—ã–∑–≤–∞–ª –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å –Ω–∞ {bet}$! –í–≤–µ–¥–∏—Ç–µ /accept –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è.")

async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏"""
    user_id = update.message.from_user.id

    if user_id not in active_duels:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –¥—É—ç–ª—å!")
        return

    opponent_id, bet = active_duels[user_id]

    if user_id not in user_balances or user_balances[user_id] < bet:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏!")
        return


    user_balances[user_id] -= bet
    user_balances[opponent_id] -= bet

    await update.message.reply_text("üé≤ –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    await context.bot.send_message(opponent_id, "üé≤ –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    await asyncio.sleep(3)


    winner = random.choice([user_id, opponent_id])
    loser = opponent_id if winner == user_id else user_id

    winnings = int(bet * 2 * 0.95)
    user_balances[winner] += winnings

    await context.bot.send_message(winner, f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –¥—É—ç–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ {winnings}$! üí∞")
    await context.bot.send_message(loser, "üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –¥—É—ç–ª—å...")

    del active_duels[user_id]


async def crash(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    if len(context.args) == 0:
        await update.message.reply_text("üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/crash <—Å—Ç–∞–≤–∫–∞>`")
        return

    try:
        bet = int(context.args[0])
        if bet <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        if bet > user_balances[user_id]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return

    user_balances[user_id] -= bet
    await update.message.reply_text(
        f"üìà –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {bet}$, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å—Ç—ë—Ç! –ù–∞–ø–∏—à–∏—Ç–µ `/cashout`, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à.")

    active_crash_games[user_id] = {"bet": bet, "multiplier": 1.0, "active": True}

    while active_crash_games[user_id]["active"]:
        await asyncio.sleep(1)
        active_crash_games[user_id]["multiplier"] += round(random.uniform(0.1, 0.5), 2)

        if random.randint(1, 100) < 10:
            await update.message.reply_text(
                f"üí• –ö—Ä—ç—à! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {active_crash_games[user_id]['multiplier']:.2f}x. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}$!")
            del active_crash_games[user_id]
            return

        await update.message.reply_text(f"üìà –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {active_crash_games[user_id]['multiplier']:.2f}x")

async def cashout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if user_id not in active_crash_games or not active_crash_games[user_id]["active"]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ Crash!")
        return

    winnings = int(active_crash_games[user_id]["bet"] * active_crash_games[user_id]["multiplier"])
    user_balances[user_id] += winnings
    await update.message.reply_text(
        f"üéâ –í—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à –Ω–∞ {active_crash_games[user_id]['multiplier']:.2f}x –∏ –ø–æ–ª—É—á–∏–ª–∏ {winnings}$!")

    del active_crash_games[user_id]


async def rob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if len(context.args) == 0:
        await update.message.reply_text("üè¥‚Äç‚ò†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/rob @username`")
        return

    target_username = context.args[0].strip("@")
    target_id = next((uid for uid, uname in players.items() if uname == target_username), None)

    if target_id is None or target_id not in user_balances:
        await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if target_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return

    if user_balances[target_id] < 100:
        await update.message.reply_text("‚ùå –£ –∏–≥—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è!")
        return

    if random.randint(1, 100) <= 50:
        stolen_amount = random.randint(int(user_balances[target_id] * 0.2), int(user_balances[target_id] * 0.5))
        user_balances[user_id] += stolen_amount
        user_balances[target_id] -= stolen_amount

        await update.message.reply_text(f"üè¥‚Äç‚ò†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ @{target_username} –∏ —É–∫—Ä–∞–ª–∏ {stolen_amount}$!")
        await context.bot.send_message(target_id, f"üöî –í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {stolen_amount}$!")
    else:
        fine = random.randint(100, 500)
        user_balances[user_id] -= fine
        await update.message.reply_text(f"üöî –í–∞—Å –ø–æ–π–º–∞–ª–∏! –®—Ç—Ä–∞—Ñ {fine}$.")


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)
    await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$")


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    balance = user_balances.get(user_id, START_BALANCE)

    if user_id not in user_stats:
        user_stats[user_id] = {"wins": 0, "losses": 0}

    wins = user_stats[user_id]["wins"]
    losses = user_stats[user_id]["losses"]
    vip_status = "VIP-–∏–≥—Ä–æ–∫ üèÜ" if balance > 10000 else "–û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫"

    await update.message.reply_text(
        f"üÜî *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance}$\n"
        f"üé∞ *–ü–æ–±–µ–¥:* {wins} | ‚ùå *–ü–æ—Ä–∞–∂–µ–Ω–∏–π:* {losses}\n"
        f"üéñ *–°—Ç–∞—Ç—É—Å:* {vip_status}",
        parse_mode="Markdown"
    )

async def hack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in user_stats:
        user_stats[user_id] = {"wins": 0, "losses": 0}

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    if len(context.args) == 0:
        await update.message.reply_text("üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/hack <—Å—Ç–∞–≤–∫–∞>`")
        return

    try:
        bet = int(context.args[0])
        if bet <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        if bet > user_balances[user_id]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        await update.message.reply_text("üë®‚Äçüíª –í–∑–ª–æ–º –∫–∞–∑–∏–Ω–æ –Ω–∞—á–∞–ª—Å—è...")

        from asyncio import sleep
        await sleep(2)

        success = random.randint(1, 100) <= 10  # 10% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
        if success:
            winnings = bet * 5
            user_balances[user_id] += winnings
            user_stats[user_id]["wins"] += 1
            await update.message.reply_text(f"‚úÖ –í–∑–ª–æ–º —É—Å–ø–µ—à–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {winnings}$!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
        else:
            loss = bet * 2
            user_balances[user_id] -= loss
            user_stats[user_id]["losses"] += 1
            await update.message.reply_text(f"‚ùå –í–∑–ª–æ–º –Ω–µ —É–¥–∞–ª—Å—è! -{loss}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!")

CRIMES = [
    ("bank", "üè¶ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞", 5000, 30),
    ("car", "üöó –ö—Ä–∞–∂–∞ –º–∞—à–∏–Ω—ã", 3000, 40),
    ("money", "üíµ –ü–æ–¥–¥–µ–ª–∫–∞ –¥–µ–Ω–µ–≥", 2000, 50),
    ("robbery", "üî™ –ì—Ä–∞–±–µ–∂ –≤ –ø–µ—Ä–µ—É–ª–∫–µ", 1000, 60),
    ("casino", "üé∞ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ", 7000, 20)
]
async def crime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton(crime[1], callback_data=crime[0])] for crime in CRIMES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üöî –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", reply_markup=reply_markup)

async def commit_crime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    crime_id = query.data

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE
    if user_id not in user_stats:
        user_stats[user_id] = {"wins": 0, "losses": 0}

    selected_crime = next((crime for crime in CRIMES if crime[0] == crime_id), None)
    if not selected_crime:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    crime_name, reward, success_chance = selected_crime[1:]

    await query.message.edit_text(f"üöî –ü–æ–ø—ã—Ç–∫–∞ {crime_name}...")

    await asyncio.sleep(3)

    if random.randint(1, 100) <= success_chance:
        user_balances[user_id] += reward
        user_stats[user_id]["wins"] += 1
        await query.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward}$!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        loss = reward // 2
        user_balances[user_id] -= loss
        user_stats[user_id]["losses"] += 1
        await query.message.reply_text(f"‚ùå –í–∞—Å –ø–æ–π–º–∞–ª–∏! –®—Ç—Ä–∞—Ñ: {loss}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")

async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/bet [—Å–æ–±—ã—Ç–∏–µ] [—Å—Ç–∞–≤–∫–∞]`")
        return

    event = " ".join(context.args[:-1])
    try:
        amount = int(context.args[-1])
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!")
        return

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    if user_id not in user_stats:
        user_stats[user_id] = {"wins": 0, "losses": 0}  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ stats

    if amount > user_balances[user_id]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    user_balances[user_id] -= amount
    await update.message.reply_text(f"üéØ –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É `{amount}$` –Ω–∞: {event}\n‚åõ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    await asyncio.sleep(5)

    outcome = random.choice(["win", "lose"])
    if outcome == "win":
        winnings = amount * 2
        user_balances[user_id] += winnings
        user_stats[user_id]["wins"] += 1
        await update.message.reply_text(
            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {event} —Å–ª—É—á–∏–ª–æ—Å—å!\n"
            f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings}$!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$"
        )
    else:
        user_stats[user_id]["losses"] += 1
        await update.message.reply_text(
            f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: {event} **–Ω–µ** —Å–ª—É—á–∏–ª–æ—Å—å...\n"
            f"üí∏ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {amount}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$"
        )

async def casino(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette")],
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="dice")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)


async def request_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    game = query.data
    context.user_data["game"] = game
    await query.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")


async def set_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    game = context.user_data.get("game")

    if user_id not in user_stats:
        user_stats[user_id] = {"wins": 0, "losses": 0}

    if not game:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /casino")
        return

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    try:
        bet = int(update.message.text)
        if bet <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        balance = user_balances.get(user_id, START_BALANCE)
        if bet > balance:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        user_bets[user_id] = bet
        user_balances[user_id] -= bet

        if game == "russian_roulette":
            await play_russian_roulette(update, context)
        if game == "roulette":
            await roulette(update, context)
        elif game == "blackjack":
            await blackjack(update, context)
        elif game == "dice":
            await dice(update, context)
        elif game == "poker":
            await poker(update, context)

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!")


async def roulette(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    bet = user_bets.get(user_id, 100)
    winning_number = random.randint(0, 36)
    user_number = random.randint(0, 36)

    if winning_number == user_number:
        winnings = bet * 5
        user_balances[user_id] += winnings
        await update.message.reply_text(
            f"üéâ –í—ã–ø–∞–ª–æ {winning_number}, –≤—ã —É–≥–∞–¥–∞–ª–∏! +{winnings}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        await update.message.reply_text(
            f"üò¢ –í—ã–ø–∞–ª–æ {winning_number}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {user_number}. -{bet}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")


CARD_VALUES = {
    "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10,
    "J": 10, "Q": 10, "K": 10, "A": 11
}

active_blackjack_games = {}

def deal_card():
    return random.choice(list(CARD_VALUES.keys()))


def calculate_score(cards):
    score = sum(CARD_VALUES[card] for card in cards)
    aces = cards.count("A")


    while score > 21 and aces:
        score -= 10
        aces -= 1

    return score


async def blackjack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    if len(context.args) == 0:
        await update.message.reply_text("üé∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/blackjack <—Å—Ç–∞–≤–∫–∞>`")
        return

    try:
        bet = int(context.args[0])
        if bet <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        if bet > user_balances[user_id]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return


    player_cards = [deal_card(), deal_card()]
    dealer_cards = [deal_card(), deal_card()]

    player_score = calculate_score(player_cards)
    dealer_score = calculate_score(dealer_cards)

    active_blackjack_games[user_id] = {
        "bet": bet,
        "player_cards": player_cards,
        "dealer_cards": dealer_cards,
        "player_score": player_score,
        "dealer_score": dealer_score,
        "active": True
    }

    user_balances[user_id] -= bet  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É
    await update.message.reply_text(
        f"üÉè –í—ã –ø–æ–ª—É—á–∏–ª–∏: {', '.join(player_cards)} ({player_score} –æ—á–∫–æ–≤)\n"
        f"ü§µ –î–∏–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {dealer_cards[0]}, ?\n\n"
        "‚úã –ù–∞–ø–∏—à–∏—Ç–µ `/hit`, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É, –∏–ª–∏ `/stand`, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ö–æ–¥."
    )

async def hit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in active_blackjack_games:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/blackjack <—Å—Ç–∞–≤–∫–∞>`.")
        return

    game = active_blackjack_games[user_id]


    new_card = deal_card()
    game["player_cards"].append(new_card)
    game["player_score"] = calculate_score(game["player_cards"])


    if game["player_score"] > 21:
        del active_blackjack_games[user_id]
        await update.message.reply_text(
            f"üíÄ –í—ã –≤–∑—è–ª–∏ {new_card}. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {game['player_score']} –æ—á–∫–æ–≤.\n"
            f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {game['bet']}$!"
        )
        return

    await update.message.reply_text(
        f"üÉè –í—ã –≤–∑—è–ª–∏ {new_card}. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {', '.join(game['player_cards'])} ({game['player_score']} –æ—á–∫–æ–≤).\n"
        "‚úã –ù–∞–ø–∏—à–∏—Ç–µ `/hit`, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –µ—â—ë, –∏–ª–∏ `/stand`, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å."
    )


async def stand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in active_blackjack_games:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/blackjack <—Å—Ç–∞–≤–∫–∞>`.")
        return

    game = active_blackjack_games[user_id]


    while game["dealer_score"] < 17:
        new_card = deal_card()
        game["dealer_cards"].append(new_card)
        game["dealer_score"] = calculate_score(game["dealer_cards"])


    if game["dealer_score"] > 21 or game["player_score"] > game["dealer_score"]:
        winnings = game["bet"] * 2
        user_balances[user_id] += winnings
        result = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {winnings}$."
    elif game["player_score"] == game["dealer_score"]:
        user_balances[user_id] += game["bet"]
        result = "üòê –ù–∏—á—å—è. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
    else:
        result = f"üíÄ –î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {game['bet']}$."

    del active_blackjack_games[user_id]

    await update.message.reply_text(
        f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(game['player_cards'])} ({game['player_score']} –æ—á–∫–æ–≤)\n"
        f"ü§µ –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {', '.join(game['dealer_cards'])} ({game['dealer_score']} –æ—á–∫–æ–≤)\n\n"
        f"{result}"
    )


CARD_RANKS = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
DECK = [rank for rank in CARD_RANKS] * 4  # 4 –º–∞—Å—Ç–∏


active_poker_games = {}


def deal_cards(num):
    return random.sample(DECK, num)


async def poker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in user_balances:
        user_balances[user_id] = START_BALANCE

    if len(context.args) == 0:
        await update.message.reply_text("üé≤ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/poker <—Å—Ç–∞–≤–∫–∞>`")
        return

    try:
        bet = int(context.args[0])
        if bet <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        if bet > user_balances[user_id]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return


    player_hand = deal_cards(2)
    dealer_hand = deal_cards(2)
    community_cards = deal_cards(5)

    active_poker_games[user_id] = {
        "bet": bet,
        "player_hand": player_hand,
        "dealer_hand": dealer_hand,
        "community_cards": community_cards,
    }

    user_balances[user_id] -= bet

    await update.message.reply_text(
        f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(player_hand)}\n"
        f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet}$\n\n"
        "‚úã –ù–∞–ø–∏—à–∏—Ç–µ `/showdown`, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã."
    )


async def showdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in active_poker_games:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/poker <—Å—Ç–∞–≤–∫–∞>`.")
        return

    game = active_poker_games[user_id]


    player_combination = game["player_hand"] + game["community_cards"]
    dealer_combination = game["dealer_hand"] + game["community_cards"]


    player_score = hand_strength(player_combination)
    dealer_score = hand_strength(dealer_combination)

    if player_score > dealer_score:
        winnings = game["bet"] * 2
        user_balances[user_id] += winnings
        result = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {winnings}$."
    elif player_score == dealer_score:
        user_balances[user_id] += game["bet"]
        result = "üòê –ù–∏—á—å—è. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
    else:
        result = f"üíÄ –î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {game['bet']}$."

    del active_poker_games[user_id]

    await update.message.reply_text(
        f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(game['player_hand'])}\n"
        f"ü§µ –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {', '.join(game['dealer_hand'])}\n"
        f"üÉé –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: {', '.join(game['community_cards'])}\n\n"
        f"{result}"
    )

def hand_strength(cards):
    ranks = [CARD_RANKS.index(card) for card in cards]
    return max(ranks)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    bet = user_bets.get(user_id, 100)

    player_throw = random.randint(1, 6)
    bot_throw = random.randint(1, 6)

    await update.message.reply_text(f"üé≤ –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ {player_throw}, –±–æ—Ç –≤—ã–±—Ä–æ—Å–∏–ª {bot_throw}")

    if player_throw > bot_throw:
        winnings = bet * 2
        user_balances[user_id] += winnings
        await update.message.reply_text(f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! +{winnings}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    elif player_throw < bot_throw:
        await update.message.reply_text(f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        user_balances[user_id] += bet
        await update.message.reply_text(f"ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")

async def russian_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    context.user_data["game"] = "russian_roulette"
    await update.message.reply_text("üî´ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É:")


async def play_russian_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    bet = user_bets.get(user_id, 100)

    bullet_position = random.randint(1, 6)
    trigger_pull = random.randint(1, 6)

    await update.message.reply_text("üî´ –í—ã –ø–æ–¥–Ω–æ—Å–∏—Ç–µ —Ä–µ–≤–æ–ª—å–≤–µ—Ä –∫ –≤–∏—Å–∫—É –∏ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –∫—É—Ä–æ–∫...")

    if bullet_position == trigger_pull:
        user_balances[user_id] -= bet
        await update.message.reply_text(f"üí• –ë–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}$...\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    else:
        winnings = bet * 3
        user_balances[user_id] += winnings
        await update.message.reply_text(
            f"üòÖ –©–µ–ª–∫! –í–∞–º –ø–æ–≤–µ–∑–ª–æ, –±–∞—Ä–∞–±–∞–Ω –ø—É—Å—Ç! +{winnings}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}$"
        )

async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if not context.args:
        await update.message.reply_text("üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/deposit 500`")
        return

    try:
        amount = int(context.args[0])
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        user_balances[user_id] += amount
        await update.message.reply_text(
            f"‚úÖ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}$")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")


async def loan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if len(context.args) == 0:
        await update.message.reply_text("üè¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/loan <—Å—É–º–º–∞>`")
        return

    try:
        amount = int(context.args[0])
        if amount <= 0:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return

        if user_id in user_loans:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç!")
            return

        user_loans[user_id] = amount * 1.5
        user_balances[user_id] += amount

        await update.message.reply_text(f"üè¶ –í—ã –≤–∑—è–ª–∏ –∫—Ä–µ–¥–∏—Ç {amount}$! –í–∞–º –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å {user_loans[user_id]}$.")

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

async def repay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    if user_id not in user_loans:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return

    if user_balances[user_id] < user_loans[user_id]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞!")
        return

    user_balances[user_id] -= user_loans[user_id]
    del user_loans[user_id]

    await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∞—Å–∏–ª–∏ —Å–≤–æ–π –∫—Ä–µ–¥–∏—Ç! –¢–µ–ø–µ—Ä—å –≤—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –¥–æ–ª–≥–æ–≤.")

import asyncio
from telegram import BotCommand


async def set_bot_commands(app):
    commands = [
        BotCommand("start", "üìú Open menu"),
        BotCommand("balance", "üí∞ Show your balance"),
        BotCommand("casino", "üé∞ Play casino games"),
        BotCommand("deposit", "üíµ Add money to your balance"),
        BotCommand("russian_roulette", "üî´ Play Russian roulette"),
        BotCommand("profile", "üÜî View your profile"),
        BotCommand("hack", "üíª Try to hack the casino"),
        BotCommand("bet", "üíµ Place a bet on a game"),
        BotCommand("loan", "üè¶ Take a loan"),
        BotCommand("repay", "üíµ Repay your loan"),
        BotCommand("crime", "üöî Commit crimes"),
        BotCommand("crash", "üìà Play Crash"),
        BotCommand("cashout", "üí∏ Withdraw from Crash"),
        BotCommand("rob", "üè¥‚Äç‚ò†Ô∏è Rob another player")
    ]
    await app.bot.set_my_commands(commands)


def main():
    TOKEN = "7771538325:AAFS1STLG3C47o7-Nk6_htSV9e51A9A_1q0"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("casino", casino))
    app.add_handler(CommandHandler("deposit", deposit))
    app.add_handler(CommandHandler("russian_roulette", russian_roulette))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("hack", hack))
    app.add_handler(CommandHandler("bet", bet))
    app.add_handler(CommandHandler("loan", loan))
    app.add_handler(CommandHandler("repay", repay))
    app.add_handler(CommandHandler("crime", crime))
    app.add_handler(CallbackQueryHandler(commit_crime, pattern="^(bank|car|money|robbery|casino)$"))
    app.add_handler(CommandHandler("balance", leaderboard))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("duel", duel))
    app.add_handler(CommandHandler("accept", accept))
    app.add_handler(CommandHandler("crash", crash))
    app.add_handler(CommandHandler("cashout", cashout))
    app.add_handler(CommandHandler("rob", rob)),
    app.add_handler(CommandHandler("blackjack", blackjack))
    app.add_handler(CommandHandler("hit", hit))
    app.add_handler(CommandHandler("stand", stand))
    app.add_handler(CommandHandler("poker", poker))
    app.add_handler(CommandHandler("showdown", showdown))
    app.add_handler(CommandHandler("balance", balance))

    app.add_handler(CallbackQueryHandler(request_bet, pattern="^(roulette|blackjack|dice|poker)$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_bet))

    app.run_polling()


if __name__ == "__main__":
    main()